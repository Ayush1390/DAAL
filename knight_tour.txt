def is_safe(x, y, board):
    N = len(board)
    return 0 <= x < N and 0 <= y < N and board[x][y] == -1

def knight_tour_util(x, y, move_count, board, x_move, y_move):
    if move_count == len(board) ** 2:
        return True
    
    for i in range(8):
        next_x = x + x_move[i]
        next_y = y + y_move[i]
        
        if is_safe(next_x, next_y, board):
            board[next_x][next_y] = move_count
            
            if knight_tour_util(next_x, next_y, move_count + 1, board, x_move, y_move):
                return True
            
            board[next_x][next_y] = -1

    return False

def knight_tour(N, start_x, start_y):
    board = [[-1 for _ in range(N)] for _ in range(N)]
    
    x_move = [2, 1, -1, -2, -2, -1, 1, 2]
    y_move = [1, 2, 2, 1, -1, -2, -2, -1]
    
    board[start_x][start_y] = 0

    if not knight_tour_util(start_x, start_y, 1, board, x_move, y_move):
        print("Solution does not exist")
    else:
        print("Knight's tour solution:")
        for row in board:
            print(row)

def main():
    N = int(input("Enter the size of the chessboard (N x N): "))
    start_x = int(input("Enter the starting x position (0 to N-1): "))
    start_y = int(input("Enter the starting y position (0 to N-1): "))
    
    if 0 <= start_x < N and 0 <= start_y < N:
        knight_tour(N, start_x, start_y)
    else:
        print("Invalid starting position. Please enter values between 0 and", N - 1)

if __name__ == "__main__":
    main()
